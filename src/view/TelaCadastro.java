package view;

import ATV_2_UC10_Aluno_Glauber.Filmes;

import javax.swing.JOptionPane;
import dao.FilmesDAO;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author glaub Form para realizar CRUD
 */
public class TelaCadastro extends javax.swing.JFrame {

    /**
     *
     * @author glaub CRIAR UM CLASSE SERVICE PARA TODOS ESSAS CHAMADAS
     */
    private void preencherTabela() {
        /**
         * Preenchendo a tabela
         */
        try {
            String nome = txtPesquisaComFiltros.getText();

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            FilmesDAO filmesDAO = new FilmesDAO();
            List<Filmes> listaFilmes = filmesDAO.getTodosFilmes(nome);

            DefaultTableModel tabelaProdutos = (DefaultTableModel) tblFilmes.getModel();
            tabelaProdutos.setNumRows(0);

            tblFilmes.setRowSorter(new TableRowSorter<>(tabelaProdutos));
            for (Filmes f : listaFilmes) {
                Object[] obj = new Object[]{
                    f.getId(),
                    f.getNome(),
                    f.getData(),
                    f.getCategoria()
                };
                tabelaProdutos.addRow(obj);
            }
        } catch (Exception e) {
            System.out.println("erro ao montar tabela " + e.getMessage());
        }
    }

    private void preencherTabelaID() {
        /**
         * PREENCHENDO ATRAVÉS DO FILTRO
         */
        try {

            int id = Integer.parseInt(txtPesquisaComFiltros.getText());

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            FilmesDAO filmesDAO = new FilmesDAO();
            List<Filmes> listaFilmes = filmesDAO.getTodosFilmesId(id);

            DefaultTableModel tabelaProdutos = (DefaultTableModel) tblFilmes.getModel();
            tabelaProdutos.setNumRows(0);

            tblFilmes.setRowSorter(new TableRowSorter<>(tabelaProdutos));
            for (Filmes f : listaFilmes) {
                Object[] obj = new Object[]{
                    f.getId(),
                    f.getNome(),
                    f.getData(),
                    f.getCategoria()
                };
                tabelaProdutos.addRow(obj);
            }
        } catch (Exception e) {
            System.out.println("erro ao montar tabela " + e.getMessage());
        }
    }

    private void preencherTabelaCategoria() {
        /**
         * PREENCHENDO ATRAVÉS DO FILTRO
         */
        try {

            String categoriaPesquisa = txtPesquisaComFiltros.getText();

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            FilmesDAO filmesDAO = new FilmesDAO();
            List<Filmes> listaFilmes = filmesDAO.getFilmeCateroia(categoriaPesquisa);

            DefaultTableModel tabelaProdutos = (DefaultTableModel) tblFilmes.getModel();
            tabelaProdutos.setNumRows(0);

            tblFilmes.setRowSorter(new TableRowSorter<>(tabelaProdutos));
            for (Filmes f : listaFilmes) {
                Object[] obj = new Object[]{
                    f.getId(),
                    f.getNome(),
                    f.getData(),
                    f.getCategoria()
                };
                tabelaProdutos.addRow(obj);
            }
        } catch (Exception e) {
            System.out.println("erro ao montar tabela " + e.getMessage());
        }
    }

    public TelaCadastro() {
        initComponents();
        preencherTabela();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelCadastro = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnLimpar = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        txtData = new javax.swing.JTextField();
        txtCategoria = new javax.swing.JTextField();
        txtNomeFilme = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPesquisaId = new javax.swing.JTextField();
        btnPesquisaId = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        txtIdResult = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFilmes = new javax.swing.JTable();
        btnCarregarCampos = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        txtPesquisaComFiltros = new javax.swing.JTextField();
        cmbFilter = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CenaFlix");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.black, null, null));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("CenaFlix ");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rockwell", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        labelCadastro.setFont(new java.awt.Font("Rockwell", 0, 30)); // NOI18N
        labelCadastro.setText("<HTML><U>Cadastro de Filmes</U></HTML>");
        labelCadastro.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel3.setText("Nome do Filme:");

        jLabel4.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel4.setText("Data de Lançamento:");

        jLabel5.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel5.setText("Identificador:");

        btnLimpar.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnCadastrar.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        txtData.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtData.setToolTipText("EX: 10/11/2023");

        txtCategoria.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtCategoria.setToolTipText("Digite a categoria do filme");

        txtNomeFilme.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtNomeFilme.setToolTipText("Digite o nome do filme");

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel2.setText("Número identificador:");

        txtId.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtId.setToolTipText("Digite um número de identificação");
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel6.setText("Pesquisar por Id:");

        txtPesquisaId.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtPesquisaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaIdActionPerformed(evt);
            }
        });

        btnPesquisaId.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        btnPesquisaId.setText("Pesquisar");
        btnPesquisaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaIdActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        txtIdResult.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtIdResult.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel7.setText("Categoria:");

        tblFilmes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblFilmes.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        tblFilmes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Identicador", "Nome Do Filme", "Data de Lançamento", "Categoria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFilmes);

        btnCarregarCampos.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        btnCarregarCampos.setText("Carregar Campos");
        btnCarregarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarCamposActionPerformed(evt);
            }
        });

        jSeparator1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel8.setText("Pesquisar:");

        txtPesquisaComFiltros.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        txtPesquisaComFiltros.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtPesquisaComFiltrosCaretUpdate(evt);
            }
        });

        cmbFilter.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Id", "Nome", "Categoria" }));

        jLabel9.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel9.setText("Filtrar por:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(btnCadastrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExcluir))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtData)
                            .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNomeFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(199, 199, 199)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(168, 168, 168)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPesquisaId)
                            .addComponent(txtIdResult, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(btnPesquisaId)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPesquisaComFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCarregarCampos)))
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(240, 240, 240))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(labelCadastro)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPesquisaId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisaId))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNomeFilme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar)
                    .addComponent(btnEditar)
                    .addComponent(btnLimpar)
                    .addComponent(btnExcluir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtPesquisaComFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnCarregarCampos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        txtData.getAccessibleContext().setAccessibleDescription("Exemplo: 24/05/20");
        txtData.getAccessibleContext().setAccessibleParent(jLabel4);
        txtCategoria.getAccessibleContext().setAccessibleParent(jLabel5);
        txtNomeFilme.getAccessibleContext().setAccessibleParent(jLabel3);
        txtId.getAccessibleContext().setAccessibleParent(jLabel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        /**
         * Limpar campos
         */
        txtId.setText("");
        txtNomeFilme.setText("");
        txtData.setText("");
        txtCategoria.setText("");

        txtId.requestFocus();


    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        /**
         * Cadastrar
         */
        Filmes filme = new Filmes();
        FilmesDAO dao = new FilmesDAO();

        try {
            int idNovo = Integer.parseInt(txtId.getText().trim());

            // Checando id
            if (txtId.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Identificador não pode ficar vazio. Preencha o campo e tente novamente!");
                return;
            }
            //  se o ID já está cadastrado na tabela
            if (isIdJaCadastrado(idNovo)) {
                JOptionPane.showMessageDialog(null, "Filme já cadastrado, insira outro identificador não cadastrado na tabela");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Identificador inválido. Por favor, insira um número inteiro válido.");
            return;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            // CONVERT STRING TO DATE
            Date date = sdf.parse(txtData.getText());
            filme.setData(date);

            DateTimeFormatter formatar = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            String dataFormatada = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(date);

            // Tentando definir o ID do filme
            try {
                filme.setId(Integer.parseInt(txtId.getText().trim()));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Identificador inválido. Por favor, insira um número inteiro válido.");
                return;
            }

            filme.setNome(txtNomeFilme.getText().trim());
            filme.setCategoria(txtCategoria.getText().trim());

            if (filme.getNome().isEmpty() || filme.getCategoria().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos e tente novamente!");
                return;
            }

        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Por favor Insira a data no formato EX:10/01/2021");
            System.out.println("Erro ao converter Data: " + e.getMessage());
            return;
        }

        JOptionPane.showMessageDialog(null, "Filme Cadastrado!");

        // Limpando os campos
        txtId.setText("");
        txtNomeFilme.setText("");
        txtData.setText("");
        txtCategoria.setText("");

        // Salvando o filme
        dao.salvarFilme(filme);

        // Desconectando do banco de dados
        dao.desconectar();

    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnPesquisaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaIdActionPerformed

        /**
         * Pesquisar id
         */
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {

            int idPesquisa = Integer.parseInt(txtPesquisaId.getText());

            FilmesDAO filmesDAO = new FilmesDAO();

            Filmes filmes = filmesDAO.getFilmes(idPesquisa);

            if (filmes == null) {
                JOptionPane.showMessageDialog(null, "Filme não encontrado tente outro ID");

            } else {
                txtIdResult.setText(String.valueOf(filmes.getId()));
                txtId.setText(String.valueOf(filmes.getId()));
                txtNomeFilme.setText(filmes.getNome());
                txtData.setText(String.valueOf(filmes.getData()));
                txtCategoria.setText(filmes.getCategoria());

            }
        } catch (Exception e) {
            System.out.println("Nao possivel foi pesquisar,erro na busca " + e.getMessage());

        }
        txtPesquisaId.setText("");


    }//GEN-LAST:event_btnPesquisaIdActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        /**
         * Editar através da info resgatada da tabela ou campos
         */
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        int id = Integer.parseInt(txtIdResult.getText());

        String nomedofilme = txtNomeFilme.getText();
        String datalancamento = txtData.getText();
        String categoria = txtCategoria.getText();

        Filmes filmes = new Filmes();
        filmes.setId(id);
        filmes.setNome(nomedofilme);
        filmes.setCategoria(categoria);

        try {

            filmes.setData(sdf.parse(txtData.getText()));

        } catch (Exception e) {
            System.out.println("Erro ao converter Data " + e.getMessage());

        }
        FilmesDAO filmesDAO = new FilmesDAO();
        filmesDAO.editar(filmes);

        JOptionPane.showMessageDialog(null, "filmes editado!");

        txtId.setText("");
        txtNomeFilme.setText("");
        txtData.setText("");
        txtCategoria.setText("");


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnCarregarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarCamposActionPerformed

        /**
         * Carregar campos atraves da selecao na tabela
         */
        int linhaSelecionada = tblFilmes.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um item da tabela para continuar ");
        } else {

            carregarCampos();
        }

    }//GEN-LAST:event_btnCarregarCamposActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

    }//GEN-LAST:event_formFocusGained

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        preencherTabela();
    }//GEN-LAST:event_formWindowGainedFocus

    private void txtPesquisaComFiltrosCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtPesquisaComFiltrosCaretUpdate
        /**
         * Case combobox filtros
         */
        switch (cmbFilter.getSelectedIndex()) {
            case 2:

                preencherTabela();

                break;
            case 1:
                preencherTabelaID();

                break;
            case 3:
                preencherTabelaCategoria();

                break;
            default:
                break;
        }
    }//GEN-LAST:event_txtPesquisaComFiltrosCaretUpdate

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        /**
         * Excluir do banco
         */
        carregarCampos();
        FilmesDAO filmesDAO = new FilmesDAO();
        int idResultado = Integer.parseInt(txtId.getText());
        int linhaSelecionada = tblFilmes.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um item da tabela para continuar ");
        }

        try {

            String nomedofilme = txtNomeFilme.getText();
            String datalancamento = txtData.getText();
            String categoria = txtCategoria.getText();

            Filmes filmes = new Filmes();
            filmes.setId(idResultado);

            filmesDAO.excluir(idResultado);

            JOptionPane.showMessageDialog(null, "Filme excluido com sucesso !");

            txtId.setText("");
            txtNomeFilme.setText("");
            txtData.setText("");
            txtCategoria.setText("");

        } catch (Exception e) {
            System.out.println("erro ao passar Dados " + e.getMessage());
        }


    }//GEN-LAST:event_btnExcluirActionPerformed

    private void txtPesquisaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisaIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCadastro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnCarregarCampos;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnPesquisaId;
    private javax.swing.JComboBox<String> cmbFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelCadastro;
    private javax.swing.JTable tblFilmes;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtIdResult;
    private javax.swing.JTextField txtNomeFilme;
    private javax.swing.JTextField txtPesquisaComFiltros;
    private javax.swing.JTextField txtPesquisaId;
    // End of variables declaration//GEN-END:variables

    /**
     * metodo para carregar campos busca os valores e preenche o txtfield
     */
    private void carregarCampos() {
        try {
            int selectedRow = tblFilmes.getSelectedRow();

            if (selectedRow >= 0) {
                // Obtém o modelo da tabela
                DefaultTableModel model = (DefaultTableModel) tblFilmes.getModel();

                // Recupera os valores da linha selecionada
                int identificador = (int) model.getValueAt(selectedRow, 0);
                int id = (int) model.getValueAt(selectedRow, 0);
                String nome = (String) model.getValueAt(selectedRow, 1);
                Date datalancamento = (Date) model.getValueAt(selectedRow, 2);
                String categoria = (String) model.getValueAt(selectedRow, 3);

                // Preenche os campos do formulário com os dados recuperados
                txtIdResult.setText(String.valueOf(identificador));
                txtId.setText(String.valueOf(id));
                txtNomeFilme.setText(nome);
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                txtData.setText(sdf.format(datalancamento));
                txtCategoria.setText(categoria);
            }
        } catch (Exception e) {
            System.out.println("erro a carregar tabela  " + e.getMessage());
        }

    }

    public int linhaSelecionada() {
        int linhaSelecionada = tblFilmes.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um iem da tabela para continuar ");
        }
        ///
        return Integer.parseInt((String) tblFilmes.getValueAt(linhaSelecionada, 0));

    }

    private boolean isIdJaCadastrado(int id) {
        for (int i = 0; i < tblFilmes.getRowCount(); i++) {
            int idExistente = (int) tblFilmes.getValueAt(i, 0);
            if (idExistente == id) {
                return true;
            }
        }
        return false;
    }

}
